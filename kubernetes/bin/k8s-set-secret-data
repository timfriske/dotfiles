#!/usr/bin/env bash

# K8S Set Secret Data
# ===================
# Tim Friske <me@tifr.de>
#
# Sets the base-64 encoded sensitive data of the given Kubernetes secret
# in decoded form, i.e. in plain-text. This script can be used to add or
# replace secret key-value pairs. The user is prompted for the sensitive
# data which is hidden during input to avoid espionage.
#
# Deps:: bash, env, jq, kubectl

# Fail-fast.
shopt -os nounset pipefail errexit errtrace

secret_name="${1:?secret name required}"
secret_keys=("${@:2}")
: "${secret_keys[@]:?secret keys required}"

# Stores the secret key-value pairs with plain-text values.
declare -A secret_data

# Reads the secret value of each given secret key into the associative
# array `secret_data`.
function read_secret_data {
  local secret_key secret_value
  for secret_key in "${@}"; do
    read -es -p "${secret_key}: " secret_value; echo
    secret_data["${secret_key}"]="${secret_value}"
  done
}

# Prints each secret key-value-pair stored in the associative array
# `secret_data` as JSON patch *replace* operation with the plain-text
# secret values base-64 encoded. These operations are then ready to be
# consumed by a `kubectl patch --type=json --patch` command.
function print_secret_data {
  local secret_key secret_value
  for secret_key in "${!secret_data[@]}"; do
    secret_value="${secret_data["${secret_key}"]}"
    jq --null-input --arg sk "${secret_key}" --arg sv "${secret_value}" \
      '{op: "replace", path: ("/data/" + $sk), value: ($sv | @base64)}'
  done
}

read_secret_data "${secret_keys[@]}"
# Update the given Kubernetes secret with the given JSON patches.
kubectl patch secret "${secret_name}" --type=json \
  --patch "$(print_secret_data | jq --slurp)"
