#!/usr/bin/env bash

# K8S Get Secret Data
# ===================
# Tim Friske <me@tifr.de>
#
# Gets the base-64 encoded sensitive data of the given Kubernetes secret
# in decoded form, i.e. in plain-text.
#
# Deps:: bash, env, jq, kubectl

# Ensure fail-fast script execution.
shopt -os nounset pipefail errexit errtrace

secret_name="${1:?secret name required}"

if [[ "${#@}" == 1 ]]; then
  kubectl get secret "${secret_name}" --output json \
    | jq 'select(.data != null) | .data | to_entries | map({(.key): (.value | @base64d)}) | add'
  exit
fi

# Read multi-line jq script into variable for legibility.
read -r -d '' JQ_SELECT_SECRET_KEYS <<'JQ_SELECT_SECRET_KEYS' || true
# Store secret data in variable.
.data as $data
  # Store secret keys given as positional arguments in variable.
  | $ARGS.positional | map({(.): true}) | add as $sks
  # Convert secret data to key-value pairs.
  | $data | to_entries
  # Select only secret data key-value pairs whose keys were requested.
  # Convert base-64 encoded sensitive values to plain-text.
  | map(select(.key as $sk | $sks | has($sk)) | {(.key): (.value | @base64d)})
  # Merge secret data key-value pairs into one object like input data.
  | add // {}
JQ_SELECT_SECRET_KEYS

kubectl get secret "${secret_name}" --output json \
  | jq --args "${JQ_SELECT_SECRET_KEYS}" "${@:2}"
