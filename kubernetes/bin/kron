#!/usr/bin/env bash

# Kron command
# ============
# Tim Friske <me@tifr.de>
#
# Lets the user interactively filter and select from a list of Kubernetes
# cronjobs the ones to manage, e.g. un/suspending, editing them etc.
#
# Deps:: awk, bash, env, fzf, kubectl, parallel, xargs

# Ensure fail-fast script execution.
shopt -os nounset noclobber pipefail errexit errtrace

function cjs { printf '%s\n' "${@}" | awk --source='{print $1}'; } 
function par { parallel --no-run-if-empty --keep-order -- "${@}"; }
function pam { parallel --no-run-if-empty --keep-order --max-args=1 -- "${@}"; }
function map { xargs --no-run-if-empty --max-args=1 --open-tty -- "${@}"; }
export -f -- cjs par pam map

function patch_susp {
  local -- suspended="${1:?suspended}" cronjob="${2:?cronjob}" suspension
  suspension="$(printf '{"spec":{"suspend": %s}}' "${suspended}")"
  kubectl patch cronjob --patch "${suspension}" -- "${cronjob}"
}; export -f -- patch_susp

function pick {
  local -- bindings=(
    'ctrl-a:toggle-all'
    'ctrl-d:become(cjs {+} | par kubectl describe cronjob --)'
    'ctrl-e:become(cjs {+} | map kubectl edit cronjob --)'
    'ctrl-g:become(cjs {+} | par kubectl get cronjob --)'
    'ctrl-l:become(cjs {+})'
    'ctrl-r:become(cjs {+} | par kubectl delete cronjob --)'
    'ctrl-s:become(cjs {+} | pam patch_susp true)'
    'ctrl-u:become(cjs {+} | pam patch_susp false)'
    'ctrl-z:clear-selection'
  )
  fzf --bind="$(IFS=,; printf '%s' "${bindings[*]}")" "${@}"
}

# NAME (1st column), SCHEDULE (2nd-6th pseudo column), SUSPEND (7th column)
kubectl get cronjobs | pick --header-lines=1 --cycle --multi --nth=1,7 --exit-0
