#!/usr/bin/env bash
#
# SSH user key generation
# =======================
# Tim Friske <me@tifr.de>
#
# This interactive program generates _SSH_ keys for the current user.
# It generates two keys, one _Ed25519_ key and one _RSA-4096_ key. Any
# option is presented to the user whose default value s/he can either
# accept or overwrite.
#
# Important note: For increased security and performance you should
# prefer the modern _Ed25519_ key whenever possible. For compatibility
# with older _SSH_ implementations you can fallback to the dated but
# widely supported _RSA-4096_ key.
#
# Tip: Run this program with `sudo` as another user to generate _SSH_
# keys for that user on-the-fly, i.e. without logging in as that user
# and out again.

# Ensure fail-fast script execution.
shopt -os nounset pipefail errexit errtrace

echo Choose folder common to all SSH key pairs for the user.
key_folder=~/.ssh
read -er -p 'Key folder: ' -i "${key_folder}" key_folder
key_folder=${key_folder:-.}
mkdir --verbose --parents -- "${key_folder}"

# Generate the following types of _SSH_ keys for below reasons:
#
#   1. Ed25519: Generate a public and private key pair encoded according
#      to the _EdDSA_ _Edwards-curve Digital Signature Algorithm_
#      public-key cryptography algorithm because it seems to be the type
#      of key with the most secure and also fastest digital signature
#      scheme currently supported by _SSH_ implementations such as
#      _OpenSSH_. Other advantages are that an _Ed25519_ key is of fixed
#      length and also relatively short, e.g. if compared to variable
#      length types of keys such as _RSA_.
#
#   2. RSA: Generate a public and private key pair encoded according to
#      the _RSA_ _Rivest, Shamir and Adleman_ public-key cryptography
#      algorithm as a second best choice compared to the _Ed25519_ key
#      mainly for compatibility with older _SSH_ implementations.
#
# Make use of the following non-standard options for below reasons:
#
#   1. Output file (f): Write the public/private key pair into files
#      with the given name prefix.
#
#   2. Type (t): Generate the public/private key pair with the most
#      secure/compatible types of algorithms.
#
#   3. Key size (b): Increase the key size to make the public/private
#      key pair even more secure.
#
#   4. Comment (C): Embed the given comment into the public/private key
#      pair in order to be able to identify the key pair and to
#      differentiate it from others.
#
#   5. New-format private key (o): Save the private key in _OpenSSH's_
#      new file format that makes the private key harder for attackers
#      to disclose and corrupt. The `-o` flag is already the default for
#      an _Ed25519_ key but should be explicitly set for any other
#      protocol version 2 key.
#
#   6. KDF rounds (a): Increase the _KDF_ _Key Derivation Function_
#      rounds in order to make it harder to brute-force crack the
#      passphrase of the private key.
#
echo Choose options of SSH Ed25519 public/private key pair.
key_file="id_ed25519"
read -er -p 'Key file: ' -i "${key_file}" key_file
key_comment="SSH Ed25519 key of user ${USER} created on \
$(date --iso-8601)."
read -er -p 'Key comment: ' -i "${key_comment}" key_comment
key_path="${key_folder}/${key_file}"
ssh-keygen -f "${key_path}" -t ed25519 -C "${key_comment}" -a 100

echo Choose options of SSH RSA-4096 public/private key pair.
key_file="id_rsa"
read -er -p 'Key file: ' -i "${key_file}" key_file
key_comment="SSH RSA-4096 key of user ${USER} created on \
$(date --iso-8601)."
read -er -p 'Key comment: ' -i "${key_comment}" key_comment
key_path="${key_folder}/${key_file}"
ssh-keygen -f "${key_path}" -t rsa -b 4096 -C "${key_comment}" -o -a 100
