#!/usr/bin/env bash

# AWS EKS Tag ASGs With AZ command
# ================================
# Tim Friske <me@tifr.de>
#
# Tags the AWS EC2 auto scaling groups (ASGs) with a tag recognized by the
# Kubernetes cluster autoscaler to determine in which availability zone (AZ) an
# ASG manages EC2 instances. This information is used by the autoscaler to
# balance instances between AZs.
#
# Deps:: aws, bash, env, jq

# Ensure fail-fast script execution.
shopt -os nounset noclobber pipefail errexit errtrace

# Input parameters and validation:
cluster="${1:-"${cluster:?required}"}"

# Lists AZs and their ASGs sorted by AZ and ASG as tabulator-separated values.
function list_az_asg {
  local cluster="${1:?cluster}"
  local jq_query=(
    '.AutoScalingGroups'
    '|map(select(.AvailabilityZones|length==1)'
    '|{az:.AvailabilityZones[0],asg:.AutoScalingGroupName})'
    '|group_by(.az)|map(sort_by(.asg)|map([.az,.asg]))|add[]|@tsv'
  )
  aws autoscaling describe-auto-scaling-groups \
    --filters "Name=tag-key,Values=k8s.io/cluster-autoscaler/${cluster}" \
  | jq --raw-output "$(IFS=;printf '%s' "${jq_query[*]}")"
}

function tag_asg_with_az {
  local asg="${1:?asg}" az="${2:?az}"
  printf 'In AZ "%s" tag ASG "%s" with it.\n' "${az}" "${asg}"
  local asg_tags=(
    "ResourceId=${asg}"
    "ResourceType=auto-scaling-group"
    "Key=k8s.io/cluster-autoscaler/node-template/label/topology.ebs.csi.aws.com/zone"
    "Value=${az}"
    "PropagateAtLaunch=false"
  )
  aws autoscaling create-or-update-tags --tags "$(IFS=,; printf '%s' "${asg_tags[*]}")"
}; export -f tag_asg_with_az

list_az_asg "${cluster}" \
  | parallel --no-run-if-empty --keep-order --colsep '\s+' -- tag_asg_with_az '{2}' '{1}'
