# Startup file for Bash interactive shells
# ========================================
# Tim Friske <me@tifr.de>
#
# The _Bash_ _Bourne Again Shell_ reads and executes commands from its
# configuration files but only if these exist and are readable.  When
# started as an interactive shell it first reads its system-wide startup
# file `/etc/bash.bashrc`.  It then continues to read its user-specific
# startup file `~/.bashrc`.
#
# This configuration file shall contain only non-default settings
# specific to interactive shells in order to keep it lean and thus easy
# to understand and maintain.  In case an interactive login shell is
# started this startup file shall be read and its commands executed by
# the first of _Bash's_ user-specific startup files for login shells
# that _Bash_ encounters, that is `~/.bash_profile`, `~/.bash_login` or
# `~/.profile`.
#
# See also:
#   * man:bash[1]
#   * link:{system-home}/bash.bashrc
#   * link:{user-home}/.bashrc
#   * link:{user-home}/.bash_profile
#   * link:{user-home}/.bash_login
#   * link:{user-home}/.profile

# Terminal settings
# -----------------

# Disable echoing control characters because they mangle the other
# output. Disable`CTRL-S` and `CTRL-Q` to stop and start terminal
# output because this function is not very useful and just confuses
# most users. The previously bound hot keys can be assigned new
# functions hereafter.
if [[ "${-}" == *i* ]]; then
  stty -echoctl -ixon
fi

# Shell options
# -------------

# Edit commands with Vi- instead of Emacs-like key bindings.
shopt -os vi

# Make it easy to name and navigate directories.
shopt -s autocd cdable_vars cdspell dirspell

# List any stopped and running jobs before exiting an interactive shell
# in order to not kill important jobs unintentionally but exit them
# manually, e.g. by saving their data first.  To list the remaining jobs
# is what most users would usually do if the shell they are about to
# exit reports that there are a number of stopped jobs.
shopt -s checkjobs

# Update window size after each command.
shopt -s checkwinsize

# Also store multi-line commands in history in case the user wants to
# adapt them later on, e.g. in case of syntax errors.
shopt -s cmdhist lithist

# Recognize extended set of patterns during pattern matching and path
# name expansion.
shopt -s extglob globstar

# Make command history more accessible.
shopt -s histappend histreedit histverify

# Don't overwrite files with `>` file redirection operator.  This
# setting may be overruled adhoc by using the `>|` operator.
shopt -os noclobber

# Attempt to complete commands once a non-empty prefix is given in order
# to not list the entire arsenal of commands but an already reduced list.
shopt -s no_empty_cmd_completion

# Ignore upper- and lower case during path name expansion and pattern
# matching.
shopt -s nocaseglob nocasematch

# Shell aliases
# -------------

# Remove all externally defined aliases.  Aliases are meant to help the
# user to shorten frequently used commands, introduce easy to remember
# alternative names, etc.  The user should be fully aware of which
# aliases are defined in order to also benefit from using them.
unalias -a

# Bash built-ins
# ~~~~~~~~~~~~~~

# Shorthand for `history` built-in.
alias hist=history

# Synchronize histories between simultaneously running shell sessions.
alias hist-sync='history -n && history -w && history -c && history -r'

# Reload interactive login shell by replacing current shell.
alias reload-login='reload-shell -l'

# Reload interactive shell by replacing current shell.
alias reload-shell='exec "${SHELL}"'

# Show _Bash's_ version.
alias version='echo "bash version ${BASH_VERSION}"'

# File/directory name utilities
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias basename='basename ${BASENAME_X_OPTIONS:-}'

# Cd - Change Directory
# ~~~~~~~~~~~~~~~~~~~~~

# Toggle between current and previous directory.  Hitting `cdd` should
# be much faster than typing `cd`, space, and then reaching out for `-`.
alias cdd='cd -'

# Change to the directory containing the given file.
function cdf { cd -- "${1%/*}"; }

# Change to the top-level (root) directory of a Git repository.
alias cdg='cd -- "$(git rev-parse --show-toplevel)"'

# Change to the root directory.  Faster to type because characters are
# closer.
alias cdr='cd /'

# With the shell option `autocd` switched on executing `..` already
# changes to the parent directory.  This alias acts as a fallback in
# case that shell option is switched off.
alias ..='cd ..'

# The alias `...` expands on the idea of `..` by making it possible to
# go up two directories at once.  More than two levels in one go would
# mean too much mental work.
alias ...='cd ../..'

# Cp - Copy files & directories
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias cp='cp ${CP_X_OPTIONS:-}'

# Ch(attr|grp|mod|own) - Change file metadata
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias chattr='chattr ${CHATTR_X_OPTIONS:-}'
alias chgrp='chgrp ${CHGRP_X_OPTIONS:-}'
alias chmod='chmod ${CHMOD_X_OPTIONS:-}'
alias chown='chown ${CHOWN_X_OPTIONS:-}'

# Df/Du - Disk free/usage
# ~~~~~~~~~~~~~~
alias df='df ${DF_X_OPTIONS:-}'
alias du='du ${DU_X_OPTIONS:-}'

# Diff - Differences between files & directories
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias diff='diff ${DIFF_X_OPTIONS:-}'

# Free - Show free main memory and swap space
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias free='free ${FREE_X_OPTIONS:-}'

# Fzf - Fuzzy-search and select all kinds of items
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Test if fuzzy finder program _Fzf_ is installed.
if type -p fzf &> /dev/null; then
  # Test if _Fzf_ specific _Readline_ file is readable.
  if [[ -f ~/.inputrc.fzf && -r ~/.inputrc.fzf ]]; then
    # Make _Fzf_ available through _Readline_ key bindings.
    bind -f ~/.inputrc.fzf
  fi
  source fzf-insert.bash &> /dev/null
  if source fzf-files.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-af": "fzf_files"'
    bind -m vi-command '"\C-af": "i\C-af"'
  fi
  if source fzf-folders.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-ad": "fzf_folders"'
    bind -m vi-command '"\C-ad": "i\C-ad"'
  fi
  if type -p fzf-git-branch &> /dev/null; then
    bind -m vi-insert -x '"\C-gb": "fzf-git-branch"'
    bind -m vi-command '"\C-gb": "i\C-gb"'
    bind -m vi-insert -x \
      '"\C-gr": "branch_opts=--remotes fzf-git-branch"'
    bind -m vi-command '"\C-gr": "i\C-gr"'
  fi
  if source fzf-git-branch-insert.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-ab": "fzf_git_branch_insert"'
    bind -m vi-command '"\C-ab": "i\C-ab"'
    bind -m vi-insert -x \
      '"\C-ar": "branch_opts=--remotes fzf_git_branch_insert"'
    bind -m vi-command '"\C-ar": "i\C-ar"'
  fi
  if type -p fzf-git-tag &> /dev/null; then
    bind -m vi-insert -x '"\C-gt": "fzf-git-tag"'
    bind -m vi-command '"\C-gt": "i\C-gt"'
  fi
  if source fzf-git-tag-insert.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-at": "fzf_git_tag_insert"'
    bind -m vi-command '"\C-at": "i\C-at"'
  fi
  if source fzf-tmux-strings.bash &> /dev/null; then
    bind -m vi-insert -x '"\C-as": "tmux_strings"'
    bind -m vi-command '"\C-as": "i\C-as"'
  fi
fi

# Grep - Search files for content
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias grep='grep ${GREP_X_OPTIONS:-}'

# Horizontal Ruler - Print horizontal ruler
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if type -p horizontal-ruler &> /dev/null; then
  bind -m vi-insert -x '"\C-l": "horizontal-ruler;clear -x"'
  bind -m vi-command '"\C-l": "i\C-l"'
fi

# Info - View documentation about operating system and programs
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias info='info ${INFO_X_OPTIONS:-}'

# Jobs - Management of processes in foreground and background
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if type -p fzf fzf-jobs &> /dev/null; then
  function jb { eval "$(jobs | cmd='bg' fzf-jobs "${@}")"; }
  function jd { eval "$(jobs | cmd='disown' fzf-jobs "${@}")"; }
  function jdh { eval "$(jobs | cmd='disown -h' fzf-jobs "${@}")"; }
  function jf { eval "$(jobs | cmd='fg' fzf-jobs "${@}")"; }
  function jj { eval "$(jobs | cmd='jobs' fzf-jobs "${@}")"; }
  function jkc { eval "$(jobs | cmd='kill -SIGCONT' fzf-jobs "${@}")"; }
  function jkk { eval "$(jobs | cmd='kill -SIGKILL' fzf-jobs "${@}")"; }
  function jkt { eval "$(jobs | cmd='kill -SIGTERM' fzf-jobs "${@}")"; }
else
  alias jb='bg'
  alias jd='disown'
  alias jdh='disown -h'
  alias jf='fg'
  alias jj='jobs'
  alias jkc='kill -SIGCONT'
  alias jkk='kill -SIGKILL'
  alias jkt='kill -SIGTERM'
fi

# Ln - Create hard and soft links to files and folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias ln='ln ${LN_X_OPTIONS:-}'

# Mkdir - Create folders
# ~~~~~~~~~~~~~~~~~~~~~~

alias mkdir='mkdir ${MKDIR_X_OPTIONS:-}'
alias md='mkdir'

# Make and change to given, random (mdr) or temporary (mdt) directory.
#
# In the two latter cases the directory is prefixed with the name of the
# current user or _tmp_ by default, followed by a dot and ending in 10
# random alphanumeric characters. The default prefix may be overridden
# by the first argument.
function mdd { md -- "${1:-.}" && cd -- "${_}"; }
function mdr { cd -- "$(mktemp --directory -- "${1:-"${USER:-tmp}"}.XXXXXXXXXX")"; }
function mdt { cd -- "$(mktemp --tmpdir --directory -- "${1:-"${USER:-tmp}"}.XXXXXXXXXX")"; }

# Mv - Move/rename files and folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias mv='mv ${MV_X_OPTIONS:-}'

# Parallel - run commands in parallel
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias parallel='parallel ${PARALLEL_X_OPTIONS:-}'

# Python - Programming language
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

#  Creates and/or de-/activates Python virtual environment in given directory or "venv" by default.
function pynv {
  local venv="${1:-venv}"
  if declare -F deactivate &> /dev/null; then
    deactivate
  elif [[ -f "${venv}/bin/activate" ]]; then
    source "${venv}/bin/activate"
  else
    local dir venv_path="${PWD}/${venv}"
    for dir in $(ppds "${PWD}"); do
      if [[ -d "${dir}/${venv}" ]]; then
          venv_path="${dir}/${venv}"; break
      fi
    done
    if [[ ! -d "${venv_path}" ]]; then
      python3 -m venv "${venv_path}"
    fi
    if [[ -f "${venv_path}/bin/activate" ]]; then
      source "${venv_path}/bin/activate"
    else
      echo >&2 "pynv: Neither Python virtual environment's 'deactivate' function nor 'activate' shell script found!"
    fi
  fi
}

# Ripgrep - Search file contents
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rg='rg ${RIPGREP_X_OPTIONS:-}'

# Rm - Delete files and non-empty folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rm='rm ${RM_X_OPTIONS:-}'

# Rmdir - Delete empty folders
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rmdir='rmdir ${RMDIR_X_OPTIONS:-}'
alias rd='rmdir'

# Rsync - Synchronize file system trees
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rsync='rsync ${RSYNC_X_OPTIONS:-}'

# Sed - Edit streams of text
# ~~~~~~~~~~~~~~~~~~~~~~~~~~

alias sed='sed ${SED_X_OPTIONS:-}'

# Sudo - Execute programs as another user
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Make `sudo` command also work with aliases.
alias sudo='sudo '

# Xdg-open - Open files and folders w/ appropriate programs
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if type -p xdg-open &> /dev/null; then
  alias open='xdg-open'
fi

# Test if interactive shell has startup file with local overrides.
if [[ -f ~/.bashrc.local && -r ~/.bashrc.local ]]; then
  # Read and execute commands from that startup file.
  source ~/.bashrc.local
fi

# Test if _GnuPG_ for encrypting and signing data is installed.
if type -p gpg &> /dev/null; then
  # Let _GnuPG_ know on which terminal to interact with the user; for
  # example the _Gpg-agent_ daemon prompting for the passphrase.
  export GPG_TTY="$(tty)"
  echo UPDATESTARTUPTTY | gpg-connect-agent &> /dev/null
fi

# Test if neither a _Tmux_ nor _Screen_ nor _SSH_ session from
# `localhost` is running.
if ! [[ -n "${TMUX}" || "${TERM}" =~ screen
    || "${SSH_CONNECTION}" =~ ^::1|^127\.0\.0\.1 ]]; then
  # Test if _Tmux_ is on the `$PATH`.
  if type -p tmux &> /dev/null; then
    # Try to attach to latest unattached session or start a new one.
    { tmux attach-session || tmux new-session; } &> /dev/null
  fi
fi

function _on_exit {
  # Prevent duplicates when merging Bash shell histories.
  if [[ "${HISTCONTROL}" =~ erasedups ]]; then
    # 1. Read new commands from history file into memory.
    # 2. Write all commands from memory into history file.
    # 3. Clear all commands from memory.
    # 4. Read all commands from history file into memory.
    history -n && history -w && history -c && history -r
  fi
}
trap _on_exit EXIT
