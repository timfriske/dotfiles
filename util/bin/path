#!/usr/bin/env bash

# PATH Environment Variable Management command
# ============================================
# Tim Friske <me@tifr.de>
#
# Deps:: bash, env

function path_raw {
  printf '%s\n' "${PATH}"
}

function path_pretty {
  echo -e "${PATH//:/\\n}"
}

function path_appended {
  if path_contains "${1}"; then
    printf '%s\n' "${PATH}"
  else
    printf '%s\n' "${PATH}:${1}"
  fi
}

function path_prepended {
  if path_contains "${1}"; then
    printf '%s\n' "${PATH}"
  else
    printf '%s\n' "${1}:${PATH}"
  fi
}

function path_removed {
  if [[ -z "${1:+x}" ]]; then
    printf '%s\n' "${PATH}"
    return
  fi
  local path_reduced="${PATH}"
  while [[ "${path_reduced}" =~ (^|(.*):)"${1}"($|:(.*)) ]]; do
    local path_prefix="${BASH_REMATCH[2]}"
    local path_suffix="${BASH_REMATCH[4]}"
    if [[ -z "${path_prefix:+x}" ]]; then
      path_reduced="${path_suffix}"
    elif [[ -z "${path_suffix:+x}" ]]; then
      path_reduced="${path_prefix}"
    else
      path_reduced="${path_prefix}:${path_suffix}"
    fi
  done
  echo "${path_reduced}"
}

function path_usage {
  echo "usage: path (raw|pretty)"
  echo "usage: path (appended|prepended|removed) <path>"
}

function path_contains {
  [[ -z "${1:+x}" ]] || [[ "${PATH}" =~ (^|.*:)"${1}"($|:.*) ]]
}

function main {
  case "${1}" in
    raw) path_raw "${@:2}" ;;
    pretty) path_pretty "${@:2}" ;;
    appended) path_appended "${@:2}" ;;
    prepended) path_prepended "${@:2}" ;;
    removed) path_removed "${@:2}" ;;
    *) path_usage "${@:2}" ;;
  esac
}

main "${@}"
