# = GnuPG's GPG agent configuration
# Tim Friske <me@tifr.de>
#
# A daemon to manage private keys such as GPG or SSH private keys.  It
# is mostly used to ease access to the private keys of a user by not
# forcing her/him to repeatedly enter her/his passphrase to unlock a
# private key everytime an application requires it for a cryptographic
# operation.  Instead the daemon caches the unlocked version of a
# private key for a configurable amount of time until it requests its
# passphrase again.
#
# == Setup
#
# === Current Terminal
#
# It is important that a GPG agent always knows to which terminal or
# display it should continue to produce output, e.g. show the PIN-entry
# prompt or dialog to the user.  For the terminal this information comes
# from the environment variable `GPG_TTY`.  A reliable way to set and
# export this variable is to add lines similar to the following to the
# configuration file for interactive shells, e.g. for Bash `~/.bashrc`:
#
# . Notify GPG agent about terminal change
# ====
# if type gpg &> /dev/null ; then
#   export GPG_TTY="$(tty)"
# fi
# ====
#
# An already running GPG agent may also be informed about a terminal
# change by executing the command `gpg-connect-agent updatestartuptty
# /bye`.
#
# === Start and Stop
#
# From _GnuPG_ version 2 onwards a GPG agent is started on demand.
# Nevertheless it might be necessary to manually start an agent with
# `gpg-connect-agent /bye` or stop one by issuing `gpgconf --kill
# gpg-agent`.
#
# On operating systems whose processes are managed by the _Systemd_ init
# system it should also be used to start, supervise and stop a GPG agent
# as a user service under the user's control as soon as one of its
# sockets is activated.  A standard installation of the _GnuPG_ software
# already provides all the necessary unit files ready to be enabled once
# copied into one of `Systemd's_ folders for user units.
#
# Should a GPG agent be used to also serve SSH keys it is recommended to
# let the SSH agent's environment variable `SSH_AUTH_SOCK` be set by the
# unit file responsible for activating the SSH agent's socket.
#
# . Notify SSH clients about SSH agent socket
# ====
# ExecStartPost=/usr/bin/systemctl --user \
#   set-environment \
#   SSH_AUTH_SOCK=%t/gnupg/S.gpg-agent.ssh
# ====
#
# == Process Control via Signals
#
# A running GPG agent may be controlled by signals, i.e. using the
# `kill` command to send a signal to the process.  The following signals
# are understood by a GPG agent:
#
# SIGHUP;;
#   This signal causes a GPG agent to flush all cached passphrases and
#   re-read its configuration file.
# SIGTERM;;
#   This signal causes a GPG agent to shut down but wait until all
#   current requests are fulfilled.
# SIGINT;;
#   This signal causes a GPG agent to shut down immediately.
# SIGUSR1;;
#   This signal causes a GPG agent to dump internal information to the
#   log file.
# SIGUSR2;;
#   This signal is used by a GPG agent for internal purposes.

# Prevent sniffing attacks on X-display-servers.
#
grab

# Set the time a GPG entry is cached to `default-cache-ttl` seconds but
# at most to `max-cache-ttl` seconds.
#
# Do the same for a SSH entry. Expire after 86,400 seconds, i.e. 1 day.
#
default-cache-ttl 86400
max-cache-ttl 86400
default-cache-ttl-ssh 86400
max-cache-ttl-ssh 86400

# Enforce the following constraints on passphrases in order to raise the
# level of security.
#
enforce-passphrase-constraints
min-passphrase-len 8
min-passphrase-nonalpha 3

# Enable the creation of keys in the extended private key format.  The
# advantage of that format is that it is text based and can carry
# additional metadata.  In that format keys are protected by OCB.
#
enable-extended-key-format

# Use the GPG agent also as a SSH agent for OpenSSH and PuTTY.
#
# Since the SSH agent proptocol doesn't know about a GPG agent it might
# be necessary to manually start a GPG agent with `gpg-connect-agent
# /bye`.  For the same reason it might be necessary to manually tell an
# already running GPG agent on which terminal or display it should
# continue to produce output with `gpg-connect-agent updatestartuptty
# /bye`.
#
enable-ssh-support
enable-putty-support
