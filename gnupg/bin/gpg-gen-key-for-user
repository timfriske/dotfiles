#!/usr/bin/env bash

# GPG Key Generation for Personal Use
# ===================================
# Tim Friske <me@tifr.de>
#
# Generates _OpenPGP_ keys with _GPG_ for personal use for a given user ID
# following best practices:
#
# * Only one user ID to keep identities separate.
# * One key per capability to revoke them independently.
# * Favor elliptic curve 25519 over NIST curve key algorithm.
# * Favor elliptic curve 25519 over RSA key algorithm.
# * One certification-only Ed25519 primary key.
# * One signature-only Ed25519 secondary key.
# * One encryption-only Cv25519 secondary key.
# * One authentication-only Ed25519 secondary key.
#
# Upon the first run if given a user ID alone only the primary key is generated.
# Only if given the **same** user ID again but this time **together** with the
# fingerprint of the previously generated primary key the three secondary keys
# are generated.

# Ensure fail-fast script execution.
shopt -os nounset noclobber pipefail errexit errtrace

USER_ID="${USER_ID:-${1:-}}"
KEY_FPR="${KEY_FPR:-${2:-}}"
KEY_EXP="2y"

if [[ -z "${USER_ID:+x}" ]]; then
  echo >&2 'Please specify a user ID of the form'
  echo >&2 '"Real Name (Comment) <real.name@example.com>"'
  echo >&2 'where "Real Name" and "(Comment)" are optional.'
  echo >&2 'An email address alone must be given without "<>".'
  exit 1
elif [[ -z "${KEY_FPR:+x}" ]]; then
  # Upon first run:
  # Generate one certification-only Ed25519 primary key.
  gpg --quick-generate-key "${USER_ID}" ed25519 cert "${KEY_EXP}"
else
  # Upon second run:
  # Generate one signature-only Ed25519 secondary key.
  gpg --quick-add-key "${KEY_FPR}" ed25519 sign "${KEY_EXP}"
  # Generate one encryption-only Cv25519 secondary key.
  gpg --quick-add-key "${KEY_FPR}" cv25519 encr "${KEY_EXP}"
  # Generate one authentication-only Ed25519 secondary key.
  gpg --quick-add-key "${KEY_FPR}" ed25519 auth "${KEY_EXP}"
fi
