#!/usr/bin/env bash
#
# GPG Key Backup
# ==============
# Tim Friske <me@tifr.de>
#
# Backs up _OpenPGP_ keys with _GPG_ by either exporting all keys from
# all key rings or, if at least one name is given, those of the given
# names.  The backup is written in _GnuPG's_ binary format to the backup
# file given as the first argument.  Any further arguments are treated
# as the names of the keys to back up.

# Ensure fail-fast script execution.
shopt -os nounset pipefail errexit errtrace

function backup_file {
  local file_to_backup="$1"
  if [[ -e "$file_to_backup" ]]; then
    if [[ ! -f "$file_to_backup" ]]; then
      echo "File '$file_to_backup' must be a regular file."
      exit 2
    fi
    if [[ ! -r "$file_to_backup" ]]; then
      echo "File '$file_to_backup' must be readable."
      exit 2
    fi
    # Back up the latest backup file which will be replaced by a new
    # one under the same name.
    chmod u=r,go= -- "$file_to_backup"
    cp --force --backup=numbered --archive \
      -- "$file_to_backup" "$file_to_backup"
    rm --force -- "$file_to_backup"
  fi
}

# Backs up either all keys or those of the given names.
#
function gpg_backup {
  # Output _GPG_ version with which _OpenPGP_ keys are generated.
  gpg --version

  # Backup file *must* be given as first parameter.
  backup_name="${backup_name-${1:-}}"

  if [[ -z "$backup_name" ]]; then
    echo 'Please specify a backup name.'
    exit 1
  fi

  # Public keys
  backup_file "$backup_name.pub.gpg"
  gpg --export \
    --export-options backup \
    --output "$backup_name.pub.gpg" \
    ${@:2}
  chmod u=r,go= -- "$backup_name.pub.gpg"

  # Secret keys
  backup_file "$backup_name.sec.gpg"
  gpg --export-secret-keys \
    --export-options backup \
    --output "$backup_name.sec.gpg" \
    ${@:2}
  chmod u=r,go= -- "$backup_name.sec.gpg"

  # Secret sub-keys
  backup_file "$backup_name.ssb.gpg"
  gpg --export-secret-subkeys \
    --export-options backup \
    --output "$backup_name.ssb.gpg" \
    ${@:2}
  chmod u=r,go= -- "$backup_name.ssb.gpg"

  # Backup the owner trusts in order to be able to restore the Web of
  # Trust database later:
  backup_file "$backup_name.ownertrust.txt"
  gpg --export-ownertrust > "$backup_name.ownertrust.txt"
  chmod u=r,go= -- "$backup_name.ownertrust.txt"
}

gpg_backup "$@"
