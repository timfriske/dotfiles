#!/usr/bin/env bash

# Fuzzy-find and pick records w/ Fzf
# ==================================
# Tim Friske <me@tifr.de>
#
# Deps:: bash, cat, env, fzf, xargs

# Ensure fail-fast script execution.
shopt -os nounset pipefail errexit errtrace

function print_help {
  >&2 cat \
<<'HELP'
Help
====
Fuzzy-find and pick records with _Fzf_.

Usage
-----
.Command line syntax
----
fzf-pick [--help]

[<variable>=<value>]... fzf-pick

[read=1|true] fzf-pick

[write=1|true] fzf-pick

[opts="<fzf-opt-1> <fzf-opt-2> ..."] fzf-pick
----

Options
-------
--help::
  Print this program's help text.

read=1|true::
  Read new-line-terminated records.

write=1|true::
  Write new-line-terminated records.

opts="<fzf-opt-1> <fzf-opt-2> ..."::
  Set options for _Fzf_.

The program _Fzf-pick_ reads records from the standard input stream,
presents them in an interactive search screen to the user and waits for
her/him to fuzzy-find and pick the records s/he is interested in. Once
the user made her/his selection _Fzf-pick_ writes the selected records
to the standard output stream.

When _Fzf-pick's_ standard input stream is connected to a terminal it
expects each record to appear on a new line. Otherwise, e.g. when
_Fzf-pick_ reads from a file or another program, it assumes each record
to be terminated with a `\0` null character. The latter assumption may
be overridden by passing _Fzf-pick's_ `read` variable set to either `1`
or `true`.

When _Fzf-pick's_ standard output stream is connected to a terminal it
writes each record on a new line. Otherwise, e.g. when _Fzf-pick_
writes to a file or another program, it terminates each record with a
`\0` null character. The latter decision may be overridden by passing
_Fzf-pick's_ `write` variable set to either `1` or `true`.
HELP
}

function pick_records {
  local env_opts=() fzf_default_opts fzf_pick_fzf_opts
  read -r -a fzf_default_opts <<< "${FZF_DEFAULT_OPTS:-}"
  read -r -a fzf_pick_fzf_opts <<< "${FZF_PICK_FZF_OPTS:-}"
  env_opts+=("${fzf_default_opts[@]}")
  env_opts+=("${fzf_pick_fzf_opts[@]}")

  local prg_opts
  read -r -a prg_opts <<< "${opts:-}"

  local opt_read=()
  if [[ ! -t 0  && ! "${read:-}" =~ 1|true ]]; then
    opt_read=(--read0)
  fi

  local opt_print=()
  if [[ ! -t 1  && ! "${write:-}" =~ 1|true ]]; then
    opt_print=(--print0)
  fi

  fzf "${env_opts[@]}" "${prg_opts[@]}" "${opt_read[@]}" "${opt_print[@]}"
}

function fzf_pick {
  if [[ "${1:-}" == --help ]]; then
    print_help
    exit
  fi

  if [[ -n "${cmd:-}" ]]; then
    local fmt='%s\0'
    if [[ -t 1 || "${write:-}" =~ 1|true ]]; then
      fmt='%s\n'
    fi
    write='' pick_records \
      | xargs --null --replace={} --no-run-if-empty -- \
        bash -c "printf \"${fmt}\" \"${cmd:-}\" {}"
    exit
  fi

  pick_records
}

fzf_pick "${@}"
