#!/usr/bin/env bash

# Sort records w/ Sort for Fzf
# ============================
# Tim Friske <me@tifr.de>
#
# Deps:: bash, cat, env, sort, tr

# Ensure fail-fast script execution.
shopt -os nounset noclobber pipefail errexit errtrace

function print_help {
  >&2 cat \
<<'HELP'
Help
====
Sort records with _Sort_ for _Fzf_.

Usage
-----
.Command line syntax
----
fzf-sort [--help]

[<variable>=<value>]... fzf-sort

[order=month|numeric[-general|-human]|random|version] fzf-sort

[reversed=1|true] fzf-sort

[read=1|true] fzf-sort

[write=1|true] fzf-sort
----

Options
-------
--help::
  Print this program's help text.

order=month|numeric[-general|-human]|random|version::
  Sort records by the given order.

reversed=1|true::
  Sort records in reverse order.

read=1|true::
  Read new-line-terminated records.

write=1|true::
  Write new-line-terminated records.

The _Fzf-sort_ program reads records from the standard input stream,
sorts them either alphabetically or ascendingly in the given order and
writes them to the standard output stream in that sort order. With
_Fzf-sort's_ `reversed` variable set to either `1` or `true` the records
are sorted in reverse order.

When _Fzf-sort's_ standard input stream is connected to a terminal it
expects each record to appear on a new line. Otherwise, e.g. when
_Fzf-sort_ reads from a file or another program, it assumes each record
to be terminated with a `\0` null character. The latter assumption may
be overridden by passing _Fzf-sort's_ `read` variable set to either `1`
or `true`.

When _Fzf-sort's_ standard output stream is connected to a terminal it
writes each record on a new line. Otherwise, e.g. when _Fzf-sort_
writes to a file or another program, it terminates each record with a
`\0` null character. The latter decision may be overridden by passing
_Fzf-sort's_ `write` variable set to either `1` or `true`.
HELP
}

function sort_records {
  local opt_sort=(--sort)
  case "${order:-}" in
    month) opt_sort+=(month);;
    numeric) opt_sort+=(numeric);;
    numeric-general) opt_sort+=(general-numeric);;
    numeric-human) opt_sort+=(human-numeric);;
    random) opt_sort+=(random);;
    version) opt_sort+=(version);;
    *) opt_sort=();;
  esac

  local opt_reverse=()
  if [[ "${reversed:-}" =~ 1|true ]]; then
    opt_reverse=(--reverse)
  fi

  local cmd_read=cat
  if [[ -t 0 || "${read:-}" =~ 1|true ]]; then
    cmd_read='tr "\n" "\0"'
  fi

  local cmd_write=cat
  if [[ -t 1 || "${write:-}" =~ 1|true ]]; then
      cmd_write='tr "\0" "\n"'
  fi

  eval "${cmd_read}" \
    | sort "${opt_sort[@]}" "${opt_reverse[@]}" --zero-terminated \
    | eval "${cmd_write}"
}

function fzf_sort {
  if [[ "${1:-}" == --help ]]; then
    print_help
    exit
  fi

  sort_records
}

fzf_sort "${@}"
